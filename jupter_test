#%%
import matplotlib.pyplot as plt
import matplotlib as mpl
import numpy as np

x = np.linspace(0, 20, 100)
plt.plot(x, np.sin(x))
plt.show() 
# %%

# %%
hi = "hello"
print(hi)

# %%
message = 'sahdfshakh'
print(messsage)

# %%
print(message)
# %%
number_1 = ''
number_2 = ''
calc_again = ''
operation = input('''
Please type in the math operation you would like to complete
+ for addition
- for subtraction
* for multiplication
/ for division
''')

def calculate():

 
    number_1 = int(input("Enter your first number: "))
    number_2 = int(input("enter your second number: "))

    


  

    
# Addition 
# 
    if operation == '+':
                 print('{} + {} = '.format(number_1, number_2))
                 print(number_1 + number_2)

        

# Subtraction
    elif operation == '-':
                 print('{} - {} = '.format(number_1, number_2))
                 print(number_1 - number_2)



# Multiplication
    elif operation == '*':
                 print('{} * {} = '.format(number_1, number_2))
                 print(number_1 * number_2)

# Define again() function to ask user if they want to use calculator again


# Division
    elif operation == '/':
                print('{} / {} = '.format(number_1, number_2))
                print(number_1 / number_2)

# Define again() function to ask user if they want to use calculator again



    def again():
    # Take input from user
        calc_again = input('''
        Do you want to calculate again?
        Please type Y for Yes or N for NO.
        ''')
    # If user types Y, run the calculate() function
        if  calc_again.upper() == "Y":
            calculate()

    # If user type N, say good-bye to the user and end the program
        else:  
            calc_again.upper() == 'N'
            print('See you later.') 
    again()
  
# If user types another key, run the function again

calculate()

# %%
colors = ["red", "green"]
print(colors)

# %%
colors1 = colors
print(colors1)
# %%
colors1 = ["rouge", "Vert"]
print(colors1)
# %%
colours1 = ["red", "green"]
print(colours1)
# %%
colours2 = colours1
print(colours2)
# %%
colours2 = ["rouge", "vert"]
print(colours1)
# %%
print(colours2)
# %%
colours2[1] = colours1
print(colours2[1])
# %%
colours1 = ["red", "green"]
colours2 = colours1
colours2[1] = "blue"
print(colours1)
# %%
print(colours2)
# %%
list1 = ['a', 'b', 'c', 'd']
list2 = list1[:]
list2[1] = 'x'
print(list2)
# %%
print(list1)
# %%
list1 = ['a', 'b',['ab','ba']]
list2 = list1[:]
print(list1)
# %%
print(list2)
list2[0] = 'c'
list2[2][1] = 'd'
print(list1)
print(list2)
# %%
from copy import deepcopy
list2 = deepcopy(list1)
list2[2][1] = "d"
list2[0] = "c"
print(list2)
print(list1)


# %%
num = 0

def main():
    counter(num)

def counter(num):
    print(num)
    num += 1
    counter(num)
main()

# %%
def main():
    num = int(input("Please enter a non-negative integer\n"))
    fact = factorial(num)
    print("The factorial of", num, "is", fact)
def factorial(num):
    if num == 0:
        return 1
    else:
        return num*factorial(num - 1)
main()


# %%

def main():
    loopnum = int(input("How many times would you like to loop?\n"))
    counter = 1
    recurr(loopnum, counter)
def recurr(loopnum,counter):
    if loopnum > 0:
        print("This is loop iteration", counter)
        recurr(loopnum - 1, counter +1)
    else:
        print("The loop is complete.")
main()

# %%
def crazy(min_):
    yield min_
    g=crazy(min_+1)
    while True:
        yield next(g)
        yield min_
i=crazy(1)
print(i)
# %%
class MyClass:
    "This is my second class"
    a = 10
    def func(self):
        print("Hello")
print(MyClass.a)
print(MyClass.func)
print(MyClass.__doc__)
ob = MyClass()
print(MyClass.func(ob))
print(ob.func())
# %%
count = 1
while count < 10:
    if count % 2 == 0:
        break
    print(f"We're counting odd numbers: {count}")
    count += 1

# %%
list_of_points = [{1, 2}, {2, 3}, {4, 5}]
for x, y in list_of_points:
    print(f"x: {x}, y: {y}")

# %%
def hello_world():
    print("Hello, world")
# %%
hello_world

# %%
hello_world()

# %%
print ("hello_world")
# %%
def hello_world():
    print("hello world")
# %%
class Car:
    """
    Car models a car w/ tires and an engine
    """

    def __init__(self, engine, tires):
        self.engine = engine
        self.tires = tires

# %%
civic = Car('4-cylinder', ['front-driver','front-passanger','rear-driver','rear-passanger'])
civic
# %%
civic.engine
civic.tires
# %%
civic.license_plate = 'something'
# %%
civic.license_plat
def hello_world()
# %%
ob = MyClass()
# %%
ob.func()
# %%
MyClass.func(ob)
# %%
class ComplexNumber:
    def__init__(self,r=0, i= 0)
    self.real = r
    self.image = i
    
    def getData(self):
        print("{0}+{1}".format(self.real,self.image))
# Creat a new ComplexNumber object

c1 = ComplexNumber(2,3)

#Call getData() function
#output: 2+3j

c1.getData()

#Create another ComplexNumber object
#and create a new attribute "attr"

c2= ComplexNumber(5)
c2.attr = 10

# Output: (5, 0, 10)

print((c2.real, c2.imag, c2.attr))

# but c1 object doesn't have attribute 'attr'

c.attr
# %%
